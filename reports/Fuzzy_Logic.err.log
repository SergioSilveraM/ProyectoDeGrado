Traceback (most recent call last):
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/sergiosilveramurcia/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import pandas as pd
import plotly.express as px

# Load the dataset
data = pd.read_csv('../Datos/Datos.csv')

data
# List of variables to explore
variables = [
    "Temperatura Motor (Â°C)", 
    "Vibraciones (mm/s)", 
    "PresiÃ³n Aceite (bar)", 
    "Temperatura Gases Escape (Â°C)", 
    "Carga Motor (%)"
]

# Generate histograms for each variable to understand distributions
for variable in variables:
    fig = px.histogram(data, x=variable, nbins=30, title=f"Distribution of {variable}")
    fig.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[6], line 19[0m
[1;32m     17[0m [38;5;66;03m# Generate histograms for each variable to understand distributions[39;00m
[1;32m     18[0m [38;5;28;01mfor[39;00m variable [38;5;129;01min[39;00m variables:
[0;32m---> 19[0m     fig [38;5;241m=[39m [43mpx[49m[38;5;241;43m.[39;49m[43mhistogram[49m[43m([49m[43mdata[49m[43m,[49m[43m [49m[43mx[49m[38;5;241;43m=[39;49m[43mvariable[49m[43m,[49m[43m [49m[43mnbins[49m[38;5;241;43m=[39;49m[38;5;241;43m30[39;49m[43m,[49m[43m [49m[43mtitle[49m[38;5;241;43m=[39;49m[38;5;124;43mf[39;49m[38;5;124;43m"[39;49m[38;5;124;43mDistribution of [39;49m[38;5;132;43;01m{[39;49;00m[43mvariable[49m[38;5;132;43;01m}[39;49;00m[38;5;124;43m"[39;49m[43m)[49m
[1;32m     20[0m     fig[38;5;241m.[39mshow()

File [0;32m~/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/plotly/express/_chart_types.py:480[0m, in [0;36mhistogram[0;34m(data_frame, x, y, color, pattern_shape, facet_row, facet_col, facet_col_wrap, facet_row_spacing, facet_col_spacing, hover_name, hover_data, animation_frame, animation_group, category_orders, labels, color_discrete_sequence, color_discrete_map, pattern_shape_sequence, pattern_shape_map, marginal, opacity, orientation, barmode, barnorm, histnorm, log_x, log_y, range_x, range_y, histfunc, cumulative, nbins, text_auto, title, template, width, height)[0m
[1;32m    434[0m [38;5;28;01mdef[39;00m [38;5;21mhistogram[39m(
[1;32m    435[0m     data_frame[38;5;241m=[39m[38;5;28;01mNone[39;00m,
[1;32m    436[0m     x[38;5;241m=[39m[38;5;28;01mNone[39;00m,
[0;32m   (...)[0m
[1;32m    472[0m     height[38;5;241m=[39m[38;5;28;01mNone[39;00m,
[1;32m    473[0m ) [38;5;241m-[39m[38;5;241m>[39m go[38;5;241m.[39mFigure:
[1;32m    474[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
[1;32m    475[0m [38;5;124;03m    In a histogram, rows of `data_frame` are grouped together into a[39;00m
[1;32m    476[0m [38;5;124;03m    rectangular mark to visualize the 1D distribution of an aggregate[39;00m
[1;32m    477[0m [38;5;124;03m    function `histfunc` (e.g. the count or sum) of the value `y` (or `x` if[39;00m
[1;32m    478[0m [38;5;124;03m    `orientation` is `'h'`).[39;00m
[1;32m    479[0m [38;5;124;03m    """[39;00m
[0;32m--> 480[0m     [38;5;28;01mreturn[39;00m [43mmake_figure[49m[43m([49m
[1;32m    481[0m [43m        [49m[43margs[49m[38;5;241;43m=[39;49m[38;5;28;43mlocals[39;49m[43m([49m[43m)[49m[43m,[49m
[1;32m    482[0m [43m        [49m[43mconstructor[49m[38;5;241;43m=[39;49m[43mgo[49m[38;5;241;43m.[39;49m[43mHistogram[49m[43m,[49m
[1;32m    483[0m [43m        [49m[43mtrace_patch[49m[38;5;241;43m=[39;49m[38;5;28;43mdict[39;49m[43m([49m
[1;32m    484[0m [43m            [49m[43mhistnorm[49m[38;5;241;43m=[39;49m[43mhistnorm[49m[43m,[49m
[1;32m    485[0m [43m            [49m[43mhistfunc[49m[38;5;241;43m=[39;49m[43mhistfunc[49m[43m,[49m
[1;32m    486[0m [43m            [49m[43mcumulative[49m[38;5;241;43m=[39;49m[38;5;28;43mdict[39;49m[43m([49m[43menabled[49m[38;5;241;43m=[39;49m[43mcumulative[49m[43m)[49m[43m,[49m
[1;32m    487[0m [43m        [49m[43m)[49m[43m,[49m
[1;32m    488[0m [43m        [49m[43mlayout_patch[49m[38;5;241;43m=[39;49m[38;5;28;43mdict[39;49m[43m([49m[43mbarmode[49m[38;5;241;43m=[39;49m[43mbarmode[49m[43m,[49m[43m [49m[43mbarnorm[49m[38;5;241;43m=[39;49m[43mbarnorm[49m[43m)[49m[43m,[49m
[1;32m    489[0m [43m    [49m[43m)[49m

File [0;32m~/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/plotly/express/_core.py:2117[0m, in [0;36mmake_figure[0;34m(args, constructor, trace_patch, layout_patch)[0m
[1;32m   2114[0m layout_patch [38;5;241m=[39m layout_patch [38;5;129;01mor[39;00m {}
[1;32m   2115[0m apply_default_cascade(args)
[0;32m-> 2117[0m args [38;5;241m=[39m [43mbuild_dataframe[49m[43m([49m[43margs[49m[43m,[49m[43m [49m[43mconstructor[49m[43m)[49m
[1;32m   2118[0m [38;5;28;01mif[39;00m constructor [38;5;129;01min[39;00m [go[38;5;241m.[39mTreemap, go[38;5;241m.[39mSunburst, go[38;5;241m.[39mIcicle] [38;5;129;01mand[39;00m args[[38;5;124m"[39m[38;5;124mpath[39m[38;5;124m"[39m] [38;5;129;01mis[39;00m [38;5;129;01mnot[39;00m [38;5;28;01mNone[39;00m:
[1;32m   2119[0m     args [38;5;241m=[39m process_dataframe_hierarchy(args)

File [0;32m~/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/plotly/express/_core.py:1513[0m, in [0;36mbuild_dataframe[0;34m(args, constructor)[0m
[1;32m   1510[0m     args[[38;5;124m"[39m[38;5;124mcolor[39m[38;5;124m"[39m] [38;5;241m=[39m [38;5;28;01mNone[39;00m
[1;32m   1511[0m [38;5;66;03m# now that things have been prepped, we do the systematic rewriting of `args`[39;00m
[0;32m-> 1513[0m df_output, wide_id_vars [38;5;241m=[39m [43mprocess_args_into_dataframe[49m[43m([49m
[1;32m   1514[0m [43m    [49m[43margs[49m[43m,[49m[43m [49m[43mwide_mode[49m[43m,[49m[43m [49m[43mvar_name[49m[43m,[49m[43m [49m[43mvalue_name[49m
[1;32m   1515[0m [43m[49m[43m)[49m
[1;32m   1517[0m [38;5;66;03m# now that `df_output` exists and `args` contains only references, we complete[39;00m
[1;32m   1518[0m [38;5;66;03m# the special-case and wide-mode handling by further rewriting args and/or mutating[39;00m
[1;32m   1519[0m [38;5;66;03m# df_output[39;00m
[1;32m   1521[0m count_name [38;5;241m=[39m _escape_col_name(df_output, [38;5;124m"[39m[38;5;124mcount[39m[38;5;124m"[39m, [var_name, value_name])

File [0;32m~/Conda/miniconda3/envs/TimesSeries/lib/python3.9/site-packages/plotly/express/_core.py:1234[0m, in [0;36mprocess_args_into_dataframe[0;34m(args, wide_mode, var_name, value_name)[0m
[1;32m   1232[0m         [38;5;28;01mif[39;00m argument [38;5;241m==[39m [38;5;124m"[39m[38;5;124mindex[39m[38;5;124m"[39m:
[1;32m   1233[0m             err_msg [38;5;241m+[39m[38;5;241m=[39m [38;5;124m"[39m[38;5;130;01m\n[39;00m[38;5;124m To use the index, pass it in directly as `df.index`.[39m[38;5;124m"[39m
[0;32m-> 1234[0m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(err_msg)
[1;32m   1235[0m [38;5;28;01melif[39;00m length [38;5;129;01mand[39;00m [38;5;28mlen[39m(df_input[argument]) [38;5;241m!=[39m length:
[1;32m   1236[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m   1237[0m         [38;5;124m"[39m[38;5;124mAll arguments should have the same length. [39m[38;5;124m"[39m
[1;32m   1238[0m         [38;5;124m"[39m[38;5;124mThe length of column argument `df[[39m[38;5;132;01m%s[39;00m[38;5;124m]` is [39m[38;5;132;01m%d[39;00m[38;5;124m, whereas the [39m[38;5;124m"[39m
[0;32m   (...)[0m
[1;32m   1245[0m         )
[1;32m   1246[0m     )

[0;31mValueError[0m: Value of 'x' is not the name of a column in 'data_frame'. Expected one of ['presion', 'amperaje', 'vibraciones', 'temperatura', 'alineacion', 'estado'] but received: Temperatura Motor (Â°C)

